import { Router, Request, Response } from "express";
import { db } from "../database";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const router = Router();

/**
 * ‚úÖ Listar todos os funcion√°rios (sem expor senha)
 */
router.get("/", async (req: Request, res: Response) => {
  try {
    const [rows]: any = await db.query(
      "SELECT id, nome, email, telefone FROM Funcionario"
    );
    res.json({ message: "Funcion√°rios listados com sucesso", data: rows });
  } catch (err) {
    console.error("‚ùå Erro ao buscar funcion√°rios:", err);
    res.status(500).json({ error: "Erro ao buscar funcion√°rios" });
  }
});

/**
 * ‚úÖ Buscar funcion√°rio por ID
 */
router.get("/:id", async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const [rows]: any = await db.query(
      "SELECT id, nome, email, telefone FROM Funcionario WHERE id = ?",
      [id]
    );

    if (!rows || rows.length === 0) {
      return res.status(404).json({ error: "Funcion√°rio n√£o encontrado" });
    }

    res.json({ message: "Funcion√°rio encontrado", data: rows[0] });
  } catch (err) {
    console.error("‚ùå Erro ao buscar funcion√°rio:", err);
    res.status(500).json({ error: "Erro ao buscar funcion√°rio" });
  }
});

/**
 * ‚úÖ Criar funcion√°rio (com hash de senha)
 */
router.post("/", async (req: Request, res: Response) => {
  try {
    console.log("üì• Dados recebidos:", req.body);

    const { nome, email, telefone, senha } = req.body;

    if (!nome || !email || !senha) {
      return res
        .status(400)
        .json({ error: "Nome, email e senha s√£o obrigat√≥rios!" });
    }

    // üîê Gerar hash da senha
    const senhaHash = await bcrypt.hash(senha, 10);

    await db.query(
      "INSERT INTO Funcionario (nome, email, telefone, senhaHash) VALUES (?, ?, ?, ?)",
      [nome, email, telefone || null, senhaHash]
    );

    res.status(201).json({ message: "Funcion√°rio criado com sucesso!" });
  } catch (err: any) {
    console.error("‚ùå Erro ao criar funcion√°rio:", err);

    if (err.code === "ER_DUP_ENTRY") {
      return res.status(400).json({ error: "E-mail j√° cadastrado!" });
    }

    res.status(500).json({ error: "Erro ao criar funcion√°rio" });
  }
});

/**
 * ‚úÖ Atualizar funcion√°rio (sem alterar senha aqui)
 */
router.put("/:id", async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { nome, email, telefone } = req.body;

    const [result]: any = await db.query(
      "UPDATE Funcionario SET nome=?, email=?, telefone=? WHERE id=?",
      [nome, email, telefone, id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Funcion√°rio n√£o encontrado!" });
    }

    res.json({ message: "Funcion√°rio atualizado com sucesso!" });
  } catch (err) {
    console.error("‚ùå Erro ao atualizar funcion√°rio:", err);
    res.status(500).json({ error: "Erro ao atualizar funcion√°rio" });
  }
});

/**
 * ‚úÖ Deletar funcion√°rio
 */
router.delete("/:id", async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    const [result]: any = await db.query(
      "DELETE FROM Funcionario WHERE id=?",
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Funcion√°rio n√£o encontrado!" });
    }

    res.json({ message: "Funcion√°rio deletado com sucesso!" });
  } catch (err) {
    console.error("‚ùå Erro ao deletar funcion√°rio:", err);
    res.status(500).json({ error: "Erro ao deletar funcion√°rio" });
  }
});

/**
 * üîë Login do funcion√°rio
 */
router.post("/login", async (req: Request, res: Response) => {
  try {
    const { email, senha } = req.body;

    if (!email || !senha) {
      return res
        .status(400)
        .json({ error: "E-mail e senha s√£o obrigat√≥rios!" });
    }

    // üîç Buscar funcion√°rio
    const [rows]: any = await db.query(
      "SELECT * FROM Funcionario WHERE email = ? LIMIT 1",
      [email]
    );

    if (!rows || rows.length === 0) {
      return res.status(401).json({ error: "Credenciais inv√°lidas!" });
    }

    const funcionario = rows[0];

    // üîê Comparar senha
    const senhaValida = await bcrypt.compare(senha, funcionario.senhaHash);
    if (!senhaValida) {
      return res.status(401).json({ error: "Credenciais inv√°lidas!" });
    }

    // üîë Gerar token JWT
    if (!process.env.JWT_SECRET) {
      console.error("‚ö†Ô∏è JWT_SECRET n√£o configurado!");
      return res.status(500).json({ error: "Erro interno de configura√ß√£o" });
    }

    const token = jwt.sign(
      { id: funcionario.id, email: funcionario.email },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({
      message: "Login realizado com sucesso!",
      token,
      funcionario: {
        id: funcionario.id,
        nome: funcionario.nome,
        email: funcionario.email,
      },
    });
  } catch (err) {
    console.error("‚ùå Erro no login:", err);
    res.status(500).json({ error: "Erro ao realizar login" });
  }
});

export default router;
